# A list of (reference type, target module type) pairs that should be ignored
# in sphinx' nitpicky mode
#
# NOTE Before adding something here, make sure that these really are to be
#      ignored! There is a good chance that these entries could actually be
#      referenced when specified correctly.
#
#      You can use the `sphobjinv` package which comes in very handy for that:
#
#           https://github.com/bskinn/sphobjinv
#
#           sphobjinv suggest <intersphinx-url> <name-to-lookup> -su
#
# -----------------------------------------------------------------------------

# -- Docstring-content --
# The (<type>, optional) part of parameter definitions is seemingly interpreted
# as a type reference, so we need to ignore it.
py:class optional

# -- Python builtin types --
# ... that cannot be referenced (for whatever reason)
py:class collections._Link
py:class weakref

# -- third-party packages --
# ...


# -- dantro-internal --
# TODO Consolidate these type hinting definitions somewhere, then cross-ref
#      correctly.
py:class TDims
py:class TCoord
py:class TCoords
py:class TCoordsDict
py:class dantro.utils.coords.TDims
py:class dantro.utils.coords.TCoord
py:class dantro.utils.coords.TCoords
py:class dantro.utils.coords.TCoordsDict


# -- Regex patterns -----------------------------------------------------------
# These are added to the nitpick_ignore_regex list and allow regex patterns in
# both the reference type and the target.
# To add to that list, lines need to start with `re: `.
#
# NOTE That the regex pattern needs to match the whole string, as if ^ and $
#      would be inserted.

# There are a bunch of warnings from inherited code that uses a different way
# to denote types, thus leading to invalid docstring syntax that we can't
# address directly.
# Therefore, we mute those as specifically as possible ...
#
re: py:class .*Remove all items from D.*
re: py:class .*remove and return.*
re: py:class .*Update D from mapping.*
re: py:class .*if k in D, else d.*
re: py:class .*if k not in D.*
re: py:class .*remove all items from S.*
re: py:class .*return number of occurrences.*
re: py:class .*remove specified key and return.*
re: py:class .*return first index of value.*
re: py:class .*module 'weakref'.*
