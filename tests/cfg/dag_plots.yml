# Test configuration used in plot_creators/test_dag_plotting module
---
# Additional initialization kwargs for the shared PlotManager fixture
_pm_init_kwargs:
  # The base plots configuration, available in the shared plot manager
  base_cfg_pools:
    - - base
      - # .. Creators .........................................................
        creator.pyplot:
          creator: pyplot

        creator.uni:
          creator: universe
          universes: any  # otherwise it's way too many plots ...

          creator_init_kwargs:
            psgrp_path: psp/regular

          dag_options:
            select_path_prefix: ""

        creator.mv:
          creator: multiverse
          creator_init_kwargs:
            psgrp_path: psp/regular

        creator.mv_missing:
          creator: multiverse
          creator_init_kwargs:
            psgrp_path: psp/missing_data

        # .. Plot functions ...................................................
        dag.facet_grid:
          module: .generic
          plot_func: facet_grid

        dag.errorbar:  # NOTE DEPRECATED -- will be removed in 1.0
          module: .generic
          plot_func: errorbar

        dag.errorbars:
          module: .generic
          plot_func: errorbars

        # .. Selection ........................................................
        select.randints_3D:
          select:
            randints: labelled/randints  # these are 3d, dimensions x, y, z

_shared_plot_cfg: &shared_plot_cfg {}

# -----------------------------------------------------------------------------
# -- Test config below this line ----------------------------------------------
# -----------------------------------------------------------------------------

# Test cases for the test_config_based test function
config_based:
  # .. Example cases ..........................................................
  # Example for a succeeding plot invocation
  simple_example:
    plot_cfg: &simple_example
      <<: *shared_plot_cfg
      based_on: [creator.pyplot, dag.errorbars]

      # Create some mock data with the DAG framework
      transform:
        - xr.DataArray: [[.5,1,2,4,8,16,32]]
          kwargs:
            dims: [x]
            coords:
              x: [0,1,2,3,4,5,6]
          tag: y
        - pow: [!dag_tag y, .5]
          tag: yerr
        - xr.Dataset:
            - y: !dag_tag y
              yerr: !dag_tag yerr
          tag: data

      y: y
      yerr: yerr

  # Example for a failing invocation
  simple_failing:
    plot_cfg: {}
    _raises: PlotConfigError
    _match: Missing `plot_func` argument


  # .. Tests for UniversePlotCreator ..........................................
  # Plot only specific universe IDs
  uni_specific_IDs:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.uni, dag.errorbar, select.randints_3D]
      # TODO Migrate to dag.errorbars
      universes: [32, 33, 37, 68]

      transform:
        - .mean: [!dag_tag randints, [x, z]]
          tag: y
        - .std: [!dag_tag randints, [x, z]]
          tag: yerr


  # .. Test handling of missing data in MultiversePlotCreator .................

  mv_missing_uni_fails:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.mv_missing, dag.facet_grid]

      select_and_combine:
        fields:
          data: labelled/randints

    _raises: PlotCreatorError
    _match: No item .* available in ParamSpaceGroup

  mv_missing_uni: &mv_warns_fallback
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.mv_missing, dag.facet_grid]

      select_and_combine:
        allow_missing_or_failing: warn
        fields:
          data: labelled/randints

    _warns: DataOperationWarning
    _match: failed during resolution of .* using fallback instead.

  mv_missing_uni2:
    <<: *mv_warns_fallback
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.mv_missing, dag.facet_grid]

      select_and_combine:
        allow_missing_or_failing: false  # testing whether override is used
        combination_method: bad          # ignored
        fields:
          data:
            allow_missing_or_failing: warn
            combination_method: merge
            path: labelled/randints

    _warns: DataOperationWarning
    _match: failed during resolution of .* using fallback instead.

  mv_missing_uni_with_transform:
    <<: *mv_warns_fallback
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.mv_missing, dag.facet_grid]

      select_and_combine:
        allow_missing_or_failing: warn
        fields:
          data:
            path: labelled/randints
            transform:
              - .mean: [!dag_prev , [x]]

  mv_missing_uni_with_bad_transform:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.mv_missing, dag.facet_grid]

      select_and_combine:
        allow_missing_or_failing: silent  # ... because catching error
        fields:
          data:
            path: labelled/randints
            transform:
              - .mean: [!dag_prev , [bad_argument_leading_to_failure]]

    _raises: PlotCreatorError
    _match: DataOperationFailed  # ... due to completely empty merged dataset

  mv_missing_uni_bad_transform_recovered:
    <<: *mv_warns_fallback
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.mv_missing, dag.facet_grid]

      select_and_combine:
        fields:
          data:
            allow_missing_or_failing: silent  # aiming to catch a different one
            path: labelled/randints
            transform:
              - .mean: [!dag_prev , [bad_argument_leading_to_failure]]
                allow_failure: warn
                fallback: !dag_prev

    _match: bad_argument_leading_to_failure


  # .. Test conditional plot skipping .........................................

  skip_plot_directly:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.pyplot, dag.errorbars]

      transform:
        - raise_SkipPlot: [true]
          kwargs:
            reason: some reason
          tag: data

  skip_plot_conditionally:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.pyplot, dag.errorbars]

      transform:
        - xr.DataArray: [[.5,1,2,4,8,16,32]]
          kwargs:
            dims: [x]
            coords:
              x: [0,1,2,3,4,5,6]
          tag: y
        - pow: [!dag_tag y, .5]
          tag: yerr
        - xr.Dataset:
            - y: !dag_tag y
              yerr: !dag_tag yerr
          tag: to_plot

        - define: false
          tag: condition
        - raise_SkipPlot: [!dag_tag condition ]
          kwargs:
            passthrough: !dag_tag to_plot
          tag: data

      y: y
      yerr: yerr


  # .. Test DAG placeholder resolution ........................................

  phres_simple:
    plot_cfg: &phres_simple
      <<: *shared_plot_cfg
      based_on: [creator.uni, dag.errorbar, select.randints_3D]
      # TODO Migrate to dag.errorbars

      transform:
        - .mean: [!dag_tag randints, [x, z]]
          tag: y
        - .std: [!dag_tag randints, [x, z]]
          tag: yerr

        # Transformations for ResultPlaceholders
        - .mean: [!dag_tag y]
        - .item  # ... otherwise it's still an xr.DataArray
        - .format: ["The mean value is: {:.3g}", !dag_prev ]
        - print: !dag_prev  # ... to see what's going on in the test
          tag: title_str

        - define: true
          tag: use_errorbands

      # Below here, the placeholders above should be resolved
      use_bands: !dag_result use_errorbands

      helpers:
        set_title:
          title: !dag_result title_str

  phres_bad_tag:
    plot_cfg:
      <<: *phres_simple

      some_other_kwarg: !dag_result i_do_not_exist

    _raises: PlotCreatorError
    _match: Some of the tags specified in `compute_only`

  phres_operation_fails:
    plot_cfg:
      <<: *phres_simple
      transform:
        - .mean: [!dag_tag randints, [x, z]]
          tag: y
        - .std: [!dag_tag randints, [x, z]]
          tag: yerr

        - .format: ["{:d}", 1.23]  # fails due to bad format string
          tag: i_fail

      use_bands: false
      helpers: {}
      some_other_kwarg: !dag_result i_fail

    _raises: PlotCreatorError
    _match: Operation '.format' failed with a ValueError


  # .. Test nx.DiGraph generation and plotting ................................

  gen_nx_graph_minimal:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        when:
          always: true
          only_once: true

  gen_nx_graph_disabled:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        enabled: false

  gen_nx_graph_on_success:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        when:
          on_compute_success: true

  gen_nx_graph_on_compute_error:
    plot_cfg:
      <<: *simple_example

      # This will fail on compute
      transform:
        - pow: [2, .5, way, too, many_args]
          tag: y
        - pass: !dag_prev
          tag: yerr
        - xr.Dataset:
            - y: !dag_tag y
              yerr: !dag_tag yerr
          tag: data

      dag_visualization:
        when:
          on_compute_error: debug

    _raises: PlotCreatorError
    _match: Operation 'pow' failed with a TypeError

  gen_nx_graph_only_once:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        when:
          only_once: true
          on_compute_error: true
          on_compute_success: true
          on_plot_error: true
          on_plot_success: true

  gen_nx_graph_full_syntax:
    # NOTE does not use default values but aims to hit many branches
    plot_cfg:
      <<: *phres_simple

      dag_visualization:
        enabled: true
        plot_enabled: true
        export_enabled: true

        raise_exc: ~  # use creator's setting

        # Whether to additionally export the graph
        export:
          manipulate_attrs:
            map_node_attrs:
              label:
                operation: attr_mapper.copy_from_attr
                args: [description]

            keep_node_attrs:
              - label

            map_edge_attrs: {}
            keep_edge_attrs: False

          # Formats
          graphml: {}
          gml:
            file_ext: gee.em.el
          adjlist:
            enabled: true
          dot: false  # NOTE Not available without pygraphviz (i.e.: in CI)

        # Output arguments
        output:
          plot_dir: ~  # "~/Desktop/dantro_test_output"
          path_fstr: "{plot_dir:}/{name:}_dag_{scenario:}.pdf"

        # When to generate the visualization (can be: false, true, debug)
        when:
          always: true
          only_once: false
          on_compute_error: debug
          on_compute_success: false
          on_plot_error: false
          on_plot_success: false

        # Generation kwargs
        generation:
          tags_to_include: all
          include_results: false
          lookup_tags: true
          manipulate_attrs:
            map_node_attrs:
              operation: attr_mapper.dag.get_operation
              meta_operation: attr_mapper.dag.get_meta_operation
              layer: attr_mapper.dag.get_layer
              arguments:
                operation: attr_mapper.dag.format_arguments
              some_disabled_attr: ~  # None --> do not set this one
              foo_attr:
                call_lambda: "lambda *, attrs: attrs.get('foo', '(no foo)')"

        # Whether to base visualization on optimized default values or not.
        # For illustration, the defaults are used below; they do NOT have to be
        # set explicitly as done here!
        use_defaults: true

        # Drawing, using networkx.draw_networkx_<...>
        drawing:
          nodes: {}
          edges: {}

          labels:
            # Which attribute to use as node label
            from_attr: description

        # Layouting algorithm
        layout: {}

        # Figure creation via matplotlib.pyplot.figure
        figure_kwargs: {}

        # Scale figure size with "width" and "height" of the resulting graph
        # to avoid node overlapping; using these scaling factors.
        # Set to False to disable.
        scale_figsize: true

        # Saving via matplotlib.pyplot.savefig
        save_kwargs: {}

  gen_nx_label_from_operation:
    plot_cfg:
      <<: *phres_simple

      ### Start -- dag_gen_nx_label_from_operation
      dag_visualization:
        drawing:
          labels:
            from_attr: operation
            # available attributes: tag, description, operation
      ### End ---- dag_gen_nx_label_from_operation

  gen_nx_label_from_mapped_attr:
    plot_cfg:
      <<: *phres_simple

      ### Start -- dag_gen_nx_label_from_mapped_attr
      dag_visualization:
        generation:
          include_results: true
          manipulate_attrs:
            map_node_attrs:
              my_custom_attr:
                # Invoke *some* function; as an example, use a lambda to copy
                # over some node attribute data into `my_attr`
                call_lambda: "lambda *, attrs: attrs.get('result', '(no result)')"

        drawing:
          labels:
            # Use the custom attribute as a label
            from_attr: my_custom_attr
      ### End ---- dag_gen_nx_label_from_mapped_attr

  gen_nx_graph_no_raise_exc:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        raise_exc: false
        when:
          always: true

        generation:
          some_bad_argument: foo

    # will NOT fail but just return and continue
    # _raises: PlotCreatorError
    # _match: Failed generating DAG representation

  gen_nx_graph_err_generation_failed:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        when:
          always: true

        generation:
          some_bad_argument: foo

    _raises: PlotCreatorError
    _match: Failed generating DAG representation

  gen_nx_graph_err_export_failed:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        when:
          always: true

        export:
          manipulate_attrs:
            map_node_attrs:
              foo: some_bad_operation_name

    _raises: PlotCreatorError
    _match: Failed exporting DAG representation

  gen_nx_graph_err_export_failed_graphviz_missing_or_bad:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        when:
          always: true

        export:
          dot:
            bad_arg: foobar

    _raises: PlotCreatorError
    _match: Failed exporting DAG representation

  gen_nx_graph_err_plotting_failed:
    plot_cfg:
      <<: *simple_example

      dag_visualization:
        when:
          always: true

        drawing:
          foo: this is a bad argument

    _raises: PlotCreatorError
    _match: Failed plotting DAG representation


  # .. PlotHelper tests .......................................................

  helper/empty_axis:
    plot_cfg: &empty_axis
      <<: *shared_plot_cfg
      based_on: [creator.pyplot, dag.facet_grid]
      debug: true

      select:
        data:
          path: datasets/mean_and_std_4D
          transform:
            - .sel: [!dag_prev , {spam: 0}]
            - getattr: [!dag_prev , data_vars]
            - getitem: [!dag_prev , mean]

      kind: line
      x: foo
      col: bar
      col_wrap: 3

      # Despite column wrapping producing an empty plot, this should not fail,
      # because empty axes are skipped by default
      helpers:
        set_limits:
          x: [min, max]

  helper/empty_axis_fail:
    plot_cfg:
      <<: *empty_axis

      helpers:
        set_limits:
          skip_empty_axes: false
          x: [min, max]

    _raises: PlotCreatorError
    _match: Could not get a finite value


  # .. facet_grid integration tests ...........................................

  facet_grid/errorbars_standalone:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.pyplot, dag.errorbars]

      select:
        data: datasets/mean_and_std_4D

      y: mean
      yerr: std
      x: foo
      col: bar
      row: baz
      hue: spam

  facet_grid/errorbars_standalone_failing:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.pyplot, dag.errorbars]

      select:
        data: datasets/mean_and_std_4D

      y: mean
      yerr: std
      x: foo
      col: bar
      row: baz
      hue: bad dimension name

    _raises: PlotCreatorError
    _match: bad dimension name



  # .. Documentation Examples .................................................

  doc_examples_placeholder_title:
    plot_cfg:
      # Keys that need/should not be included
      creator_init_kwargs:
        psgrp_path: psp/regular
      dag_options:
        select_path_prefix: labelled

      ### Start -- placeholder_title
      # Select the creator and use the generic errorbar plotting function
      creator: universe
      universes: any

      module: .generic
      plot_func: errorbars

      select:
        # 3D data with random integers
        some_data: randints

      transform:
        # Compute the mean and standard deviation
        - .mean: [!dag_tag some_data, [x, z]]
          tag: mean
        - .std: [!dag_tag some_data, [x, z]]
          tag: stddev

        # Assemble them into a Dataset for the errorbars plot
        - xr.Dataset:
            - mean: !dag_tag mean
              stddev: !dag_tag stddev
          tag: data

        # Additional transformations for ResultPlaceholders
        - .mean: [!dag_tag mean]
        - .item  # ... otherwise it's still an xr.DataArray
        - .format: ["Some Data (total mean: {:.3g})", !dag_prev ]
          tag: title_str

      # Specify which data variable to plot as line and which as errorbands
      y: mean
      yerr: stddev
      use_bands: true

      # Now, use the place holder in the helper configuration
      helpers:
        set_title:
          title: !dag_result title_str
      ### End ---- placeholder_title

  doc_examples_mv_missing_data:
    plot_cfg:
      # Keys that need/should not be included
      creator_init_kwargs:
        psgrp_path: psp/missing_data

      ### Start -- mv_missing_data
      # Select the creator and use the generic facet grid plotting function
      creator: multiverse

      module: .generic
      plot_func: facet_grid

      # Select data, allowing for missing universes or failing .mean operation
      select_and_combine:
        allow_missing_or_failing: true
        combination_method: merge        # needed with allow_missing_or_failing
        fields:
          data:
            path: labelled/randints
            transform:
              - .mean: [!dag_prev , [x]]
      ### End ---- mv_missing_data

  doc_examples_multiplot_subplots:
    plot_cfg:
      creator: universe
      universes: single
      creator_init_kwargs:
        psgrp_path: psp/regular

      ### Start -- multiplot_subplots
      module: .multiplot
      plot_func: multiplot

      # Select some example data
      select:
        mean:
          path: labelled/randints
          transform:
            - .mean: [!dag_prev , [x, y]]
        std:
          path: labelled/randints
          transform:
            - .std: [!dag_prev , [x, y]]

      transform:
        # Explicitly extract coordinates, needed by plt.plot
        - .coords: [!dag_tag mean, z]
          tag: x_coords

      # Use PlotHelper to configure figure to have two subplots
      helpers:
        setup_figure:
          ncols: 1
          nrows: 2

      # Specify the multiplot calls
      to_plot:
        [0, 0]:
          - function: plt.plot
            args:
              - !dag_result x_coords
              - !dag_result mean
        [0, 1]:
          - function: plt.plot
            args:
              - !dag_result x_coords
              - !dag_result std
      ### End ---- multiplot_subplots

  doc_examples_dag_visualization:
    plot_cfg:
      <<: *phres_simple

      ### Start -- dag_visualization_interface
      # DAG Visualization interface; values given here are default values
      dag_visualization:
        enabled: true           # Main toggle
        plot_enabled: true      # Whether to generate a plot
        export_enabled: true    # Whether to export the graph

        # Whether to raise an exception if graph generation, plotting or
        # exporting failed. If None, will use the creator's setting.
        raise_exc: ~

        # Whether to *additionally* export the graph
        export:
          # Manipulate node or edge attributes (for export only)
          manipulate_attrs:
            map_node_attrs: {}
            map_edge_attrs: {}
            keep_node_attrs: True
            keep_edge_attrs: True

          # Export formats
          # ... need to be specified here.
          # Examples:
          gml: True
          graphml:  # arguments passed on to writer
            infer_numeric_types: True
          # dot: True  # Needs pygraphviz
          # ... more formats here ...

        # Output arguments
        output:
          plot_dir: ~  # None: Output will be aside the just-generated plot

          # A format string that is used to create the actual output path.
          # The `plot_dir` key is the one evaluated from the above argument.
          path_fstr: "{plot_dir:}/{name:}_dag_{scenario:}.pdf"

        # When to generate the visualization
        when:
          # General toggles
          always: false       # If true: always generate a DAG plot
          only_once: false    # If true: only generate one DAG plot

          # Scenarios: After which events to generate a DAG plot
          # Values can be: false, true, debug.
          # In case of 'debug', output is only generated if the creator was in
          # debug mode itself.
          on_compute_error: debug
          on_compute_success: false
          on_plot_error: false
          on_plot_success: false

        # Generation kwargs
        generation:
          tags_to_include: all
          include_results: false
          lookup_tags: true
          manipulate_attrs:
            map_node_attrs:
              # Default operations: these are set by default
              operation: attr_mapper.dag.get_operation
              layer: attr_mapper.dag.get_layer
              description: attr_mapper.dag.get_description

              # Other available operations:
              # meta_operation: attr_mapper.dag.get_meta_operation
              # arguments: attr_mapper.dag.format_arguments
              # some_attr: attr_mapper.copy_from_attrs
              # another_attr: attr_mapper.set_value

              # ... or any other registered data operation:
              # my_attr:
              #   call_lambda: "lambda *, attrs: attrs.get('foo')"

        # Whether to base layouting and visualization on optimized default
        # values or not. For illustration, the actual default values are used
        # below; they do NOT have to be set explicitly as done here!
        use_defaults: true

        # Whether to show the node status and which colors to use for it
        show_node_status: true
        node_status_color:
          initialized: lightskyblue
          queued: cornflowerblue
          computed: limegreen
          looked_up: forestgreen
          failed_here: red
          failed_in_dependency: firebrick
          used_fallback: gold
          no_status: silver

        # Layouting algorithm (and fallback)
        layout:
          model: graphviz_dot      # requires graphviz and pygraphviz
          fallback: multipartite   # will use this one if the one above fails
          silent_fallback: true

          # Arguments for the respective layouting models
          model_kwargs:
            graphviz_dot:
              args: "-y"
            multipartite:
              align: horizontal
              subset_key: layer
              scale: -1

        # Drawing, using networkx.draw_networkx_<...>
        drawing:
          nodes:
            alpha: 0.
            node_size: &node_size 600
          edges:
            arrows: true
            arrowsize: 12
            min_target_margin: 20
            min_source_margin: 20
            node_size: *node_size

          labels:
            # Which attribute to use as node label
            from_attr: description

            # Aesthetics; see matplotlib.patches.FancyBboxPatch
            font_size: 7
            bbox:
              fc: "#fffa"
              ec: "#666"
              linewidth: 0.5
              boxstyle: round

        # Figure creation via matplotlib.pyplot.figure
        figure_kwargs:
          figsize: [9, 6]

        # Scale figure size with "width" and "height" of the resulting graph
        # to avoid node overlapping; using these scaling factors.
        # Set to False to disable.
        scale_figsize: [0.25, 0.20]

        # Saving via matplotlib.pyplot.savefig
        save_kwargs:
          bbox_inches: tight
      ### End ---- dag_visualization_interface
