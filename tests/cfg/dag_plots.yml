# Test configuration used in plot_creators/test_dag_plotting module
---
# Additional initialization kwargs for the shared PlotManager fixture
_pm_init_kwargs:
  # The base plots configuration, available in the shared plot manager
  base_cfg_pools:
    - - base
      - # .. Creators .........................................................
        creator.ext:
          creator: external

        creator.uni:
          creator: universe
          universes: any  # otherwise it's way too many plots ...

          creator_init_kwargs:
            psgrp_path: psp/regular

          dag_options:
            select_path_prefix: ""

        creator.mv:
          creator: multiverse
          creator_init_kwargs:
            psgrp_path: psp/regular

        # .. Plot functions ...................................................
        dag.facet_grid:
          module: .generic
          plot_func: facet_grid

        dag.errorbar:  # NOTE DEPRECATED -- will be removed in 1.0
          module: .generic
          plot_func: errorbar

        dag.errorbars:
          module: .generic
          plot_func: errorbars

        # .. Selection ........................................................
        select.randints_3D:
          select:
            randints: labelled/randints  # these are 3d, dimensions x, y, z


_shared_plot_cfg: &shared_plot_cfg {}

# -----------------------------------------------------------------------------
# -- Test config below this line ----------------------------------------------
# -----------------------------------------------------------------------------

# Test cases for the test_config_based test function
config_based:
  # .. Example cases ..........................................................
  # Example for a succeeding plot invocation
  simple_example:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.ext, dag.errorbars]

      # Create some mock data with the DAG framework
      transform:
        - xr.DataArray: [[.5,1,2,4,8,16,32]]
          kwargs:
            dims: [x]
            coords:
              x: [0,1,2,3,4,5,6]
          tag: y
        - pow: [!dag_tag y, .5]
          tag: yerr
        - xr.Dataset:
            - y: !dag_tag y
              yerr: !dag_tag yerr
          tag: data

      y: y
      yerr: yerr

  # Example for a failing invocation
  simple_failing:
    plot_cfg: {}
    _raises: ValueError
    _match: No `creator` argument given


  # .. Test DAG placeholder resolution ........................................
  phres_simple:
    plot_cfg: &phres_simple
      <<: *shared_plot_cfg
      based_on: [creator.uni, dag.errorbar, select.randints_3D]
      # TODO Migrate to dag.errorbars

      transform:
        - .mean: [!dag_tag randints, [x, z]]
          tag: y
        - .std: [!dag_tag randints, [x, z]]
          tag: yerr

        # Transformations for ResultPlaceholders
        - .mean: [!dag_tag y]
        - .item  # ... otherwise it's still an xr.DataArray
        - .format: ["The mean value is: {:.3g}", !dag_prev ]
        - print: !dag_prev  # ... to see what's going on in the test
          tag: title_str

        - define: true
          tag: use_errorbands

      # Below here, the placeholders above should be resolved
      use_bands: !dag_result use_errorbands

      helpers:
        set_title:
          title: !dag_result title_str

  phres_bad_tag:
    plot_cfg:
      <<: *phres_simple

      some_other_kwarg: !dag_result i_do_not_exist

    _raises: PlotCreatorError
    _match: Some of the tags specified in `compute_only`

  phres_operation_fails:
    plot_cfg:
      <<: *phres_simple
      transform:
        - .mean: [!dag_tag randints, [x, z]]
          tag: y
        - .std: [!dag_tag randints, [x, z]]
          tag: yerr

        - .format: ["{:d}", 1.23]  # fails due to bad format string
          tag: i_fail

      use_bands: false
      helpers: {}
      some_other_kwarg: !dag_result i_fail

    _raises: PlotCreatorError
    _match: Failed applying operation '.format'


  # .. PlotHelper tests .......................................................

  helper/empty_axis:
    plot_cfg: &empty_axis
      <<: *shared_plot_cfg
      based_on: [creator.ext, dag.facet_grid]
      debug: true

      select:
        data:
          path: datasets/mean_and_std_4D
          transform:
            - .sel: [!dag_prev , {spam: 0}]
            - getattr: [!dag_prev , data_vars]
            - getitem: [!dag_prev , mean]

      kind: line
      x: foo
      col: bar
      col_wrap: 3

      # Despite column wrapping producing an empty plot, this should not fail,
      # because empty axes are skipped by default
      helpers:
        set_limits:
          x: [min, max]

  helper/empty_axis_fail:
    plot_cfg:
      <<: *empty_axis

      helpers:
        set_limits:
          skip_empty_axes: false
          x: [min, max]

    _raises: PlotCreatorError
    _match: Could not get a finite value


  # .. facet_grid integration tests ...........................................

  facet_grid/errorbars_standalone:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.ext, dag.errorbars]

      select:
        data: datasets/mean_and_std_4D

      y: mean
      yerr: std
      x: foo
      col: bar
      row: baz
      hue: spam


  facet_grid/errorbars_standalone_failing:
    plot_cfg:
      <<: *shared_plot_cfg
      based_on: [creator.ext, dag.errorbars]

      select:
        data: datasets/mean_and_std_4D

      y: mean
      yerr: std
      x: foo
      col: bar
      row: baz
      hue: bad dimension name

    _raises: PlotCreatorError
    _match: bad dimension name



  # .. Documentation Examples .................................................
  doc_examples_placeholder_title:
    plot_cfg:
      # Keys that need/should not be included
      creator_init_kwargs:
        psgrp_path: psp/regular
      dag_options:
        select_path_prefix: labelled

      ### Start -- placeholder_title
      # Select the creator and use the generic errorbar plotting function
      creator: universe
      universes: any

      module: .generic
      plot_func: errorbars

      select:
        # 3D data with random integers
        some_data: randints

      transform:
        # Compute the mean and standard deviation
        - .mean: [!dag_tag some_data, [x, z]]
          tag: mean
        - .std: [!dag_tag some_data, [x, z]]
          tag: stddev

        # Assemble them into a Dataset for the errorbars plot
        - xr.Dataset:
            - mean: !dag_tag mean
              stddev: !dag_tag stddev
          tag: data

        # Additional transformations for ResultPlaceholders
        - .mean: [!dag_tag mean]
        - .item  # ... otherwise it's still an xr.DataArray
        - .format: ["Some Data (total mean: {:.3g})", !dag_prev ]
          tag: title_str

      # Specify which data variable to plot as line and which as errorbands
      y: mean
      yerr: stddev
      use_bands: true

      # Now, use the place holder in the helper configuration
      helpers:
        set_title:
          title: !dag_result title_str
      ### End ---- placeholder_title
