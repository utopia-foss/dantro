# Example configuratiosn used in the test_doc_examples test module
---
# -----------------------------------------------------------------------------
# data_io/data_mngr.rst
data_io_load_cfg:
  example01:
    ### Start -- data_io_load_cfg_example01
    my_config_files:
      loader: yaml
      glob_str: 'config/*.yml'
      required: true

      # Use information from the file name to generate the target path
      path_regex: config/(\w+)_cfg.yml
      target_path: cfg/{match:}
  ### End ---- data_io_load_cfg_example01

  example02:
    ### Start -- data_io_load_cfg_example02
    # Load the (binary) measurement data for each day
    measurement_data:
      loader: hdf5
      glob_str: measurements/day*.hdf5
      required: true
      path_regex: measurements/day(\d+).hdf5
      target_path: measurements/{match:}/data

    # Load the parameter files, containing information about each day
    measurement_parameters:
      loader: yaml
      glob_str: measurements/day*_params.yml
      required: true
      path_regex: measurements/day(\d+)_params.yml
      target_path: measurements/{match:}/params
    ### End ---- data_io_load_cfg_example02

  example03:
    ### Start -- data_io_load_cfg_example03
    # Load the (binary) measurement data for each day
    measurement_data:
      loader: hdf5
      glob_str: measurements/day*.hdf5
      required: true
      path_regex: measurements/day(\d+).hdf5
      target_path: measurements/{match:}

    # Load the parameter files as container attributes
    params:
      loader: yaml
      glob_str: measurements/day*_params.yml
      required: true
      load_as_attr: true
      unpack_data: true
      path_regex: measurements/day(\d+)_params.yml
      target_path: measurements/{match:}
    ### End ---- data_io_load_cfg_example03

  example04:
    ### Start -- data_io_load_cfg_example04
    # Load the (binary) measurement data for each day
    measurement_data:
      loader: hdf5
      glob_str: measurements/day*.hdf5
      required: true
      path_regex: measurements/day(\d+).hdf5
      target_path: measurements/{match:}
    ### End ---- data_io_load_cfg_example04

  example05:
    ### Start -- data_io_load_cfg_example05
    # Load the (binary) measurement data for each day
    measurement_data:
      loader: hdf5
      glob_str: measurements/day*.hdf5
      required: true
      path_regex: measurements/day(\d+).hdf5
      target_path: measurements/{match:}
      load_as_proxy: true
      proxy_kwargs:
        resolve_as_dask: true
    ### End ---- data_io_load_cfg_example05


# -----------------------------------------------------------------------------
# plotting/plot_cfg_ref.rst

# Plot configurations showcased in the documentation
plot_cfg_ref:
  mngr_overview:
    ### Start -- plot_cfg_ref_mngr_overview
    my_plot:
      # --- Basic configuration options
      # Whether this plot should actually be performed or not
      enabled: true

      # Plot configuration inheritance (from existing base plot configurations)
      based_on: []   # applied in the order given here, recursively updating

      # The file extension for the plot output path
      file_ext: png

      # Path to a custom output directory
      out_dir: ~/my_plot_output

      # Whether to run this plot in debug mode. If given, overwrites the
      # default value specified in the PlotManager
      debug: true

      # Whether to save the plot configuration alongside the plot
      save_plot_cfg: true

      # --- Choosing and configuring a plot creator
      # Manually
      creator: pyplot

      # Initialization parameters for the selected plot creator. The ones given
      # here recursively update those given to PlotManager.__init__
      creator_init_kwargs:
        # Options provided by the BasePlotCreator
        default_ext: ~     # The default file extension
        exist_ok: false    # If true, allows overwriting plot output

        # All further options are handled by the specialization's __init__
        # ...

      # --- Plot creator arguments
      # Any further parameters are handled by the plot creator
      # ...
    ### End ---- plot_cfg_ref_mngr_overview
      # Use this dummy plot module and function, is multi-purpose. Focus is on
      # the parameters above. Benefit here: any left-over arguments from above
      # will be passed on to plt.plot, leading to an error.
      module: .basic
      plot_func: lineplot
      x: vectors/times
      y: vectors/values
      fmt: go-
