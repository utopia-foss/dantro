# Configuration for PlotManager tests with "declarative" PlotCreator
#
# This is also a showcase of the available syntax
---
# Basics ......................................................................

scatter_short:
  # This is the shortest possible configuration.
  # It uses the default mode, 'declarative', and creates a simple scatter plot
  # of two vectors.
  
  # Which data to use (keys to walk along DataManager)
  data:
    - vectors

  # How the data should be visualized
  mark: point

  # How the data should be encoded
  encoding:
    x: values:Q
    y: more_values:Q
    # shorthand notation for field:type, Q -> quantitative

  # Needed data:
  #  - vectors.values (1D)
  #  - vectors.more_values (1D, same length)


scatter_long:
  # Here, more keys are explicitly specified.
  enabled: true
  mode: declarative

  data:
    - vectors

  mark: point

  encoding:
    x:
      field: values
      type: quantitative
    y:
      field: more_values
      type: quantitative

  description: a simple 2D scatter plot

  config:
    title: 2D scatter

    # TODO can have more config here

  # Needed data:
  #  - vectors.values (1D)
  #  - vectors.more_values (1D, same length)


# Lineplots with different data access ........................................

lineplot:
  # A lineplot from vectorial data, no x-values given
  data:
    - vectors

  mark:
    type: line
    point: true

  encoding:
    y: values:Q

  # Needed data:
  #  - vectors.values (1D)


lineplot_with_x:
  # A lineplot from vectorial data, x-values given
  data:
    - vectors

  mark: line

  encoding:
    x: times:Q
    y: values:Q

  # Needed data:
  #  - vectors.times (1D)
  #  - vectors.values (1D, same length)


multi_vector_lineplot:
  # A lineplot from vectors, multiple y values
  data:
    - vectors

  # Common features
  mark: line

  encoding:
    x: times:Q

  # Layers
  layer:
    # On each level, features are inherited from the root level
    - encoding.y: values:Q
      mark.color: red  # only needed if specifically setting it is desired
    - encoding.y: more_values:Q
      mark.color: green

  # Needed data:
  #  - vectors.times (1D)
  #  - vectors.values (1D, same length)
  #  - vectors.more_values (1D, same length)


multi_lineplot_from_named_ndarray:
  # Multiple lineplots from nd-array where the dimensions are named
  data:
    - ndarrays
    - lineplot

  mark: line

  encoding:
    x: steps:Q
    y: values:Q
    color: agents:N

  # Needed data:
  #  - ndarrays.lineplot (2D) with named dimensions: steps, agents
  # NOTE: The `values` field is the default field name for the _content_ of an
  #       ndarray; optionally, it can be specified in the ndarray attributes as
  #       well and then have a different name


multi_lineplot_from_ndarray:
  # Multiple lineplot from nd-arary where the dimensions are _not_ named
  data:
    - ndarrays
    - lineplot

  mark: line

  encoding:
    x: 0         # steps
    y: values:Q  # content of the ndarray
    color: 1     # agents
    # NOTE: in this short form, integer encoding values are interpreted as the
    #       dimensions. To pass it explicitly, the `dim` key is needed

  # Needed data:
  #  - ndarrays.lineplot (2D)


multi_lineplot_from_dataframe:
  # Multiple lineplot from a pandas dataframe
  data:
    - pd
    - lineplot

  mark: line

  encoding:
    x: steps:Q
    y: values:Q
    color: agents:N
    # NOTE: This takes a pd.dataframe, groups it by the color-encoding field,
    #       and then plots field y against field x.

  # Needed data:
  #  - pd.lineplot (dataframe with fields: steps, values, agents)


# Advanced data access ........................................................

combining_data:
  # Lineplot where x-data comes from a vector and y-data comes from an ndarray
  data:
    - ndarrays
    - lineplot

  mark: line

  encoding:
    x:
      data:
        - vectors
      field:
        - times
    y: values:Q
    color: agents:N

  # Needed data:
  #  - ndarrays.lineplot (2D), named
  #  - vectors.times (1D), same length as `values` dimension of the 2d array
  
  # NOTE: shared data access is needed for the y and color encoding, thus the
  #       top-level data key needs to specify the 2d array

selecting_data:
  # Lineplot over only parts of the data
  data:
    - ndarrays
    - lineplot

  select:
    - !slice [42]  # first 42 entries in dim 0
    - !slice [~]   # all entries in dim1

  mark: line

  encoding:
    x: 0
    y: values:Q
    color: 1

  # Needed data:
  #  - ndarrays.lineplot (2D)


selecting_data_named_ndarray:
  # Lineplot over only parts of the data, where the data is named
  data:
    - ndarrays
    - lineplot

  select:
    steps: !slice [42]  # first 42 entries
    agents: !slice [~]  # all entries (could also leave it out)

  mark: line

  encoding:
    x: steps:Q
    y: values:Q
    color: agents:N

  # Needed data:
  #  - ndarrays.lineplot (2D), named dimensions: steps and agents


# Aggregate ...................................................................

aggregate_vector:
  # Aggregate vectorial data to get the mean
  data:
    - vectors

  mark: rule # spans the whole view

  encoding:
    y:
      aggregate: mean
      type: quantitative
    size:
      value: 2  # width of the rule

  layer:
    - encoding.y.field: values
    - encoding.y.field: more_values

  # Needed data:
  #  - vectors.values (1D)


aggregate_ndarray:
  # Aggregate some data to get the mean
  data:
    - vectors

  mark: rule # spans the whole view

  encoding:
    y:
      field: values 
      aggregate: mean
      type: quantitative
    size:
      value: 2  # width of the rule

  # Needed data:
  #  - vectors.values (1D)

# Repeat ......................................................................

repeat:
  # Create subplots from different data
  data:
    - vectors

  mark: !repeat-rows
    - line
    - type: line
      point: true

  encoding:
    x: times:Q
    y: !repeat-cols
      - values:Q
      - more_values:Q
      - even_more_values:Q

# Transform ...................................................................

multi_lineplot_transformed_from_ndarray:
  # Multiple lineplot from an ndarray that was transformed to pandas dataframe
  data:
    - ndarrays
    - lineplot

  transform:
    - to_dataframe:     # transforms the data to a pd.dataframe
        dim_names:      # names of the dimensions (need to label all!)
          - steps
          - agents
        values: values  # what to name the values column (default: values)

  mark: line

  encoding:
    x: steps:Q
    y: values:Q
    color: agents:N

  # Needed data:
  #  - ndarrays.lineplot (2D), no naming necessary


# TODO style
# TODO other configs?
# TODO transform
# TODO layers
# TODO repeat -> subplots
# TODO advanced data access
# TODO should 'quantitative' be default?

