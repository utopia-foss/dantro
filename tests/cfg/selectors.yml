# Possible data selectors of the ParamSpaceGroup
---
# The following selects _only_ a field and does not change the subspace
single_field:
  field:
    - foo
    - bar
    - state

non_numeric:
  field:
    - cfg

short_field_syntax:
  field: foo/bar/randints

# Can also select multiple fields, which will then be named after the given key
multi_field:
  fields:
    state: foo/bar/state
    randints:
      - foo
      - bar
      - randints
    config: # renaming here
      path: cfg

# And specify further arguments, e.g. the dtype
with_dtype:
  fields:
    state:
      path: foo/bar/state
      dtype: uint8
    randints:
      path: [foo, bar, randints]
      dtype: float32

# Can specify custom dimension names
with_dim_names:
  fields:
    state:
      path: foo/bar/state
      dims: [d0, d1, d2]
    randints:
      path: foo/bar/randints
      dims: [d0, d1, d2]

# ... which may partly go along other dimensions
mixed_dim_names:
  fields:
    state:
      path: foo/bar/state
      dims: [t, d0, d1]
    randints:
      path: foo/bar/randints
      dims: [t, d2, d3]

# This selector shows the syntax of selecting a subspace to iterate over. This
# can happen in three ways: by integer index, by setting a boolean mask, or by
# specifying locations.
subspace:
  subspace:
    p0:
      loc: [1]
    p1:
      loc: !slice [2.5]
    p2:
      idx: [1, 3, 4]
  
  field: foo/bar/state

# There is a short syntax available for the subsace selector, defaulting to loc
short_syntax:
  subspace:
    p0: 1
    p1: [1, 2]
    p2: !slice [2]

  field: foo/bar/state

# It is possible to access entries that are deeper down in the hierarchy, even
# within containers... basically, as long as item access is possible.
# TODO
