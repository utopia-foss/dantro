# Possible data selectors of the ParamSpaceGroup
---
# The following selects _only_ a field and does not change the subspace
single_field:
  field:
    - foo
    - bar
    - state

non_numeric:
  field:
    - cfg

short_field_syntax:
  field: foo/bar/randints

# Can also select multiple fields, which will then be named after the given key
multi_field:
  fields:
    state: foo/bar/state
    randints:
      - foo
      - bar
      - randints
    config: # renaming here
      path: cfg

# And specify further arguments, e.g. the dtype
with_dtype:
  fields:
    state:
      path: foo/bar/state
      dtype: uint8
    randints:
      path:
        - foo
        - bar
        - randints
      dtype: float32

# This selector shows the syntax of selecting a subspace to iterate over. This
# can happen in three ways: by integer index, by setting a boolean mask, or by
# specifying locations.
subspace_selector:
  subspace:
    p0:
      idx: [1]
    p1:
      mask: [true, false, true]
    p2:
      loc: [5,3,1]
  
  field:
    - foo
    - bar
    - randints

# There is a short syntax available for the subsace selector, defaulting to idx
short_syntax:
  subspace:
    p0: 1
    p1: [1, 2]
    p2: !slice [2]

  field: foo/bar/randints

# The names of the dimensions need not be those of the parameter dimensions
dim_renaming:
  subspace:
    p0:
      idx: 1
    p1:
      mask: [true, false, true]
    p2:
      mask: !slice [2]

  rename_dims:
    p0: param0
    p1: param1

  field: foo/bar/randints


# .............................................................................

# It is possible to access entries that are deeper down in the hierarchy, even
# within containers... basically, as long as item access is possible.




# .............................................................................
# TODO Features to add
#    - access subspaces of data
