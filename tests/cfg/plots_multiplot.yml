# Configuration for the DAG multiplot function
---
# A brief test of all various available plot configurations
# The test_multiplot.py file contains a USE_TMPDIR boolean switch that
# allows you to save the created plots and look at them.
multiplots:
  simple_scatter:
    to_plot:
      - function: sns.scatterplot
        data: !dag_result data
        x: dim_0
        y: dim_1

  shared_kwargs:
    marker: o
    linestyle: --
    to_plot:
      - function: sns.scatterplot
        data: !dag_result data
        x: dim_0
        y: dim_1
        marker: x

  cmap:
    to_plot:
      - function: [xarray.plot, scatter]
        args:
          - !dag_result data
        x: dim_0
        y: dim_1
        hue: dim_0
        cmap:
          continuous: true
          from_values:
            0: yellow
            1: red

  func_without_kwargs:
    to_plot:
      - function: sns.scatterplot  # will log a warning

  multiple_funcs:
    to_plot:
      - function: sns.lineplot
        data: !dag_result data
      - function: sns.scatterplot
        data: !dag_result data
      - function: sns.despine

  dict_specs: &dict_specs
    helpers:
      setup_figure:
        ncols: 3
        nrows: 2
    to_plot:
      [0, 0]:
        - function: sns.lineplot
          data: !dag_result data
      [1, 1]:
        - function: sns.scatterplot
          data: !dag_result data
      [2, 0]:
        - function: sns.histplot
          data: !dag_result data

  dict_specs_bad_subplots_shape:
    <<: *dict_specs
    helpers:
      setup_figure:
        ncols: 2   # too few axis --> axis selection will fail
        nrows: 10
    _raises: true
    _match: Could not select axis \(2, 0\)

  importable_function:
    to_plot:
      - function: [seaborn, lineplot]
        data: !dag_result data
        pass_axis_object_as: ax
      - function: [matplotlib, pyplot.plot]
        args: [[2, 4, 8, 16, 32]]

  constructed_function:
    dag_options:
      define:
        set_aspect:
          - lambda: "lambda ratio, *, the_axis: the_axis.set_aspect(ratio)"
        set_aspect_via_helper:
          - lambda: "lambda ratio, *, hlpr: hlpr.ax.set_aspect(ratio)"
    to_plot:
      - function: !dag_result set_aspect
        pass_axis_object_as: the_axis
        ratio: 1.5
      - function: !dag_result set_aspect_via_helper
        pass_helper: true
        ratio: 1.5

  # Try to plot all different plot kinds.
  # All plot functions should be available, but single plots are allowed
  # to fail. The plot should succeed.
  all_succeeding_sns_funcs:
    to_plot:
      - function: sns.scatterplot    # Do not fail, but warn, if 'data' missing
      - function: sns.lineplot
        data: !dag_result data
      - function: sns.histplot
        data: !dag_result data
      - function: sns.kdeplot
        data: !dag_result data
      - function: sns.ecdfplot
        data: !dag_result data
      - function: sns.rugplot
        data: !dag_result data
      - function: sns.stripplot
        data: !dag_result data
      - function: sns.swarmplot
        data: !dag_result data
      - function: sns.boxplot
        data: !dag_result data
      - function: sns.violinplot
        data: !dag_result data
      - function: sns.boxenplot
        data: !dag_result data
      - function: sns.pointplot
        data: !dag_result data
      - function: sns.barplot
        data: !dag_result data
      - function: sns.countplot
        data: !dag_result data
      - function: sns.heatmap
        data: !dag_result data
      - function: sns.despine
      - function: sns.regplot
        data: !dag_result data
      - function: sns.residplot
        data: !dag_result data

  pass_func_obj:
    transform:
      - import: [seaborn, boxplot]
        tag: boxplot
      - import: [matplotlib.pyplot, plot]
        tag: plot
    to_plot:
      - function: !dag_result boxplot
        data: !dag_result data
      - function: !dag_result plot
        args:
          - !dag_result plot_x_data
          - !dag_result plot_y_data
