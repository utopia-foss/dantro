# Configuration for the generic DAG facet grid plotting function
---
# .. No `kind` specified ......................................................
no_kind:
  no_hue: &no_hue
    specifiers: [x, 'y', row, col, frames]
    max_dims: 7
    raises:
      6: &only_1d_and_2d [PlottingError, Only 1d and 2d plots are supported]
      7: *only_1d_and_2d

  line_plots: &line_plots
    specifiers: [x, hue]
    max_dims: 4
    raises:
      3: &line_plots_1d_or_2d [PlottingError, Line plots are for 1- or 2-dimensio]
      4: *only_1d_and_2d

  line_plots_anim:
    <<: *line_plots
    specifiers: [x, hue, frames]
    max_dims: 5
    raises:
      4: *line_plots_1d_or_2d
      5: *only_1d_and_2d

  col_wrap:
    specifiers: [x, 'y', col, frames]
    max_dims: 5
    plot_kwargs:
      col_wrap: 2
    raises:
      5: *only_1d_and_2d


# .. Automatic, i.e.: `kind: auto` and auto-encoding feature ..................
auto:
  fully_automatic:
    kinds: [auto]
    specifiers: []
    max_dims: 7
    plot_kwargs:
      auto_encoding: true

  partly_specified:
    kinds: [auto]
    specifiers: [y, x, row]  # x and y given -> forces pcolormesh
    max_dims: 6
    plot_kwargs:
      auto_encoding: true
    raises:
      6: [PlottingError, must be a permuted list]

  custom_auto_encoding:
    kinds: [line, pcolormesh]
    specifiers: []
    min_dims: 2
    max_dims: 5
    plot_kwargs:
      auto_encoding:
        # Use custom order of encoding specifiers
        pcolormesh: [y, x, frames, row, col]
        line: [y, frames, row, col, hue]

  auto_col_wrap:
    kinds: [line]
    specifiers: []
    min_dims: 2
    max_dims: 6
    plot_kwargs:
      auto_encoding:
        line: [x, col, hue, frames, row]  # to provoke early col_wrap
      col_wrap: auto
    raises:
      6: *line_plots_1d_or_2d


# .. With `kind` specified ....................................................
# Tests of all various kinds; not in-depth but covering most cases
kinds:
  line: &line
    kinds: [line]
    specifiers: [x, row, hue, frames]
    min_dims: 3
    max_dims: 4
    plot_kwargs:
      col_wrap: 2

  line_with_helpers:
    <<: *line
    kinds: [line]
    specifiers: [x, col, row, hue]
    min_dims: 3
    max_dims: 4
    plot_kwargs:
      col_wrap: 2
      helpers:
        set_legend:
          use_legend: true
          hiding_threshold: 2

  step:
    <<: *line
    kinds: [step]
    specifiers: [x, row, frames, col]
    plot_kwargs: {}

  contour: &contour
    kinds: [contourf, contour]
    specifiers: [x, 'y', col, frames]
    min_dims: 3
    max_dims: 4
    plot_kwargs:
      col_wrap: 2

  pcolormesh:
    <<: *contour
    kinds: [pcolormesh]

  imshow:
    <<: *contour
    kinds: [imshow]

  hist1d:
    kinds: [hist]
    specifiers: [frames]
    min_dims: 1
    max_dims: 1

  hist4d:
    kinds: [hist]
    specifiers: [frames]
    min_dims: 4
    max_dims: 4

  errorbars:
    kinds: [errorbars]
    specifiers: [x, hue, col]  # rest is auto-encoded
    min_dims: 1
    max_dims: 5
    test_data_path: ds_labelled
    plot_kwargs:
      y: foo
      yerr: bar
      auto_encoding: true
      use_bands: true

  scatter:
    kinds: [scatter]
    specifiers: [col, frames]
    min_dims: 2
    max_dims: 4
    test_data_path: ds_labelled
    plot_kwargs:
      x: foo
      y: bar
      markersize: baz
      hue: spam
      auto_encoding: true



# NOTE: All below are extended tests, i.e.: only run if FULL_TEST is set!
# .. line-like plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
line:
  line_ext:
    kinds: [line]
    specifiers: [x, row, col, hue, frames]
    max_dims: 6
    raises:
      0: &Exception [Exception, '']
      6: *line_plots_1d_or_2d

  # basically the same as line, but does not support hue (for some reason)
  step_ext:
    kinds: [step]
    specifiers: [x, row, col, frames]
    max_dims: 5
    raises:
      0: *Exception
      5: *Exception

# .. errorbar plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
errorbars:
  ebars_simple: &ebars
    kinds: [errorbars]
    specifiers: [x, hue, col]  # rest is auto-encoded
    min_dims: 1
    max_dims: 5
    test_data_path: ds_labelled
    plot_kwargs: &ebars_kwargs
      y: foo
      yerr: bar
      auto_encoding: true
      use_bands: true

      helpers:
        set_suptitle:
          title: foo

        set_figlegend:
          gather_from_fig: true
          hiding_threshold: 5

  # .. failing plots
  ebars_err_continuous_hue:
    <<: *ebars
    min_dims: 2
    max_dims: 4
    plot_kwargs:
      <<: *ebars_kwargs
      hue_style: continuous
    raises:
      2: &bad_hue_style [PlottingError, "May only be:  discrete"]
      3: *bad_hue_style
      4: *bad_hue_style

# .. 2D plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2d:
  # contour plots can plot 2-5 dimensions
  contour_ext: &contour_extended
    kinds: [contourf, contour]
    specifiers: [x, 'y', col, row, frames]
    min_dims: 0
    max_dims: 6
    raises:
      0: *Exception
      1: *Exception
      6: *Exception
    plot_kwargs: {}

  heatmap_ext:
    <<: *contour_extended
    kinds: [pcolormesh]

  # imshow plots can plot 2-6 dimensions, interpreting some values as RGB
  imshow_ext:
    kinds: [imshow]
    specifiers: [x, 'y', row, col, frames]
    max_dims: 7
    raises:
      0: *Exception
      1: *Exception
      7: *Exception

# .. histograms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
hist:
  # hist can only be used with frames, but then it accepts any dimensionality
  hist_ext:
    kinds: [hist]
    specifiers: [frames]
    max_dims: 6

  hist_errors:
    kinds: [hist]
    specifiers: [x, frames]
    max_dims: 3
    raises:
      1: &hist_type_err [PlottingError, 'hist\(\) got multiple values for arg']
      2: *hist_type_err
      3: *hist_type_err
