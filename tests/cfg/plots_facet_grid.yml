# Configuration for the generic DAG facet grid plotting function
---
# Shared YAML specifications
_:
  use_3d_projection: &use_3d_projection
    sharex: false
    sharey: false
    subplot_kws:
      projection: 3d
    helpers:
      setup_figure:
        subplot_kw:
          projection: 3d

  cm_support_kwargs: &cm_support_kwargs
    cmap:
      name: inferno
      bad: r
      under: k
      over: w
    norm:
      name: SymLogNorm
      linthresh: 1.e-3
    vmin: 0
    vmax: 1

# -----------------------------------------------------------------------------
# .. No `kind` specified ......................................................
no_kind:
  no_hue: &no_hue
    specifiers: [x, 'y', row, col, frames]
    max_dims: 7
    raises:
      6: &only_1d_and_2d [PlottingError, Only 1d and 2d plots are supported]
      7: *only_1d_and_2d

  line_plots: &line_plots
    specifiers: [x, hue]
    max_dims: 4
    raises:
      3: &line_plots_1d_or_2d [PlottingError, Line plots are for 1- or 2-dimensional]
      4: *only_1d_and_2d

  line_plots_anim:
    <<: *line_plots
    specifiers: [x, hue, frames]
    max_dims: 5
    raises:
      4: *line_plots_1d_or_2d
      5: *only_1d_and_2d

  col_wrap:
    specifiers: [x, 'y', col, frames]
    max_dims: 5
    plot_kwargs:
      col_wrap: 2
    raises:
      5: *only_1d_and_2d


# .. Automatic, i.e.: `kind: auto` and auto-encoding feature ..................
auto:
  fully_automatic:
    kinds: [auto]
    specifiers: []
    max_dims: 7
    plot_kwargs:
      auto_encoding: true

  partly_specified:
    kinds: [auto]
    specifiers: [y, x, row]  # x and y given -> forces pcolormesh
    max_dims: 6
    plot_kwargs:
      auto_encoding: true
    raises:
      6: [PlottingError, must be a permuted list]

  with_non_indexed_dims:
    kinds: [line]
    specifiers: []  # should not need to specify these for it to work
    min_dims: 2
    max_dims: 6
    test_data_path: labelled_alternating
    plot_kwargs:
      auto_encoding: true
    raises:
      6: *line_plots_1d_or_2d

  with_extra_coords:  # ... which are ignored
    kinds: [line]
    specifiers: []
    min_dims: 2
    max_dims: 6
    test_data_path: labelled_extra_coords
    plot_kwargs:
      auto_encoding: true
    raises:
      6: *line_plots_1d_or_2d

  auto_col_wrap:
    kinds: [line]
    specifiers: []
    min_dims: 2
    max_dims: 5
    test_data_path: labelled_large
    plot_kwargs:
      auto_encoding:
        # to provoke early col_wrap and test custom encoding
        line: [x, col, hue, row]
      col_wrap: auto
    raises:
      5: *line_plots_1d_or_2d

  scatter_autoenc:
    kinds: [scatter]
    specifiers: [col, frames]
    min_dims: 3
    max_dims: 5
    test_data_path: ds_labelled
    plot_kwargs:
      x: foo
      y: bar
      hue: spam
      auto_encoding: true
    raises:
      3: [PlottingError, No numeric data to plot]  # dataset is < 1D


# .. With `kind` specified ....................................................
# Tests of all various kinds; not in-depth but covering most cases
kinds:
  line: &line
    kinds: [line]
    specifiers: [x, row, hue, frames]
    min_dims: 3
    max_dims: 4
    plot_kwargs:
      col_wrap: 2

  line_with_helpers:
    <<: *line
    kinds: [line]
    specifiers: [x, col, row, hue]
    min_dims: 3
    max_dims: 4
    plot_kwargs:
      col_wrap: 2
      helpers:
        set_legend:
          use_legend: true
          hiding_threshold: 2

    warns:
      3: &warn_ignore_col_wrap [UserWarning, Ignoring col_wrap]
      4: *warn_ignore_col_wrap

  step:
    <<: *line
    kinds: [step]
    specifiers: [x, row, frames, col]
    plot_kwargs: {}

  contour: &contour
    kinds: [contourf, contour]
    specifiers: [x, 'y', col, frames]
    min_dims: 3
    max_dims: 4
    plot_kwargs:
      col_wrap: 2

  pcolormesh:
    <<: *contour
    kinds: [pcolormesh]

  imshow:
    <<: *contour
    kinds: [imshow]

  hist1d:
    kinds: [hist]
    specifiers: [frames]
    min_dims: 2
    max_dims: 2

  hist4d:
    kinds: [hist]
    specifiers: [frames]
    min_dims: 4
    max_dims: 4

  scatter:
    kinds: [scatter]
    specifiers: [col, frames]
    min_dims: 3
    max_dims: 5
    test_data_path: ds_labelled
    plot_kwargs:
      x: foo
      y: bar
      hue: spam

  # NOTE errorbars and scatter3d kinds are tested separately below


# .. errorbar plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
errorbars:
  ebars_simple: &ebars
    kinds: [errorbars]
    specifiers: [x, hue, col]  # rest is auto-encoded
    min_dims: 1
    max_dims: 5
    test_data_path: ds_labelled
    plot_kwargs: &ebars_kwargs
      y: foo
      yerr: bar
      auto_encoding: true
      use_bands: true

      helpers:
        set_suptitle:
          title: foo

        set_figlegend:
          gather_from_fig: true
          hiding_threshold: 5

  # scalar (1-sized) dimensions, indexing and non-indexing
  ebars_scalar_dims:
    <<: *ebars
    min_dims: 2
    test_data_path: ds_labelled_scalar
    plot_kwargs:
      <<: *ebars_kwargs
      squeeze: false

  ebars_scalar_dims_squeezed:
    <<: *ebars
    min_dims: 2
    test_data_path: ds_labelled_scalar_squeezed

  # .. failing plots
  ebars_err_bad_dimensionality:
    <<: *ebars
    min_dims: 3
    max_dims: 4
    specifiers: [x, col]
    plot_kwargs:
      <<: *ebars_kwargs
      hue: ~
      auto_encoding: false
    raises:
      3: [PlottingError, Expected 1D .* but selected data was 2-]
      4: [PlottingError, Expected 1D .* but selected data was 3-]

  ebars_err_continuous_hue:
    <<: *ebars
    min_dims: 2
    max_dims: 4
    plot_kwargs:
      <<: *ebars_kwargs
      hue_style: continuous
    raises:
      2: &bad_hue_style [PlottingError, "May only be:  discrete"]
      3: *bad_hue_style
      4: *bad_hue_style


# .. scatter3d plots  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
scatter3d:
  no_facet: &scatter3d_no_facet
    kinds: [scatter3d]
    specifiers: []
    min_dims: 1
    max_dims: 1
    test_data_path: ds_labelled
    plot_kwargs: &scatter3d_no_facet_kwargs
      x: foo
      y: bar
      z: baz
      # need to tell PlotHelper to setup figure using 3D projection
      helpers:
        setup_figure:
          constrained_layout: true
          subplot_kw:
            projection: 3d
        set_labels:
          rotate_z_label: true

  no_facet_with_cbar:
    <<: *scatter3d_no_facet
    plot_kwargs: &scatter3d_with_cbar
      <<: *scatter3d_no_facet_kwargs
      #
      # need a hue to have a cbar
      hue: spam
      #
      # set colormap, utilizing ColorManager
      cmap:
        name: inferno
        bad: red
        under: k
        over: w
      vmin: 0
      vmax: 1
      #
      # can also set cbar kwargs from here
      cbar_kwargs:
        label: this represents the hue  # ColorManager feature
        extend: both
        fraction: 0.04
        pad: 0.13
        shrink: 0.6

  no_facet_no_cbar:
    <<: *scatter3d_no_facet
    plot_kwargs:
      <<: *scatter3d_with_cbar
      add_colorbar: false

  xy_facet: &scatter3d_facet
    kinds: [scatter3d]
    specifiers: [col, row]
    min_dims: 3
    max_dims: 3
    test_data_path: ds_labelled
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      # need to tell FacetGrid to use 3D projection
      subplot_kws:
        projection: 3d

  with_hue:
    <<: *scatter3d_facet
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      hue: spam
      <<: *use_3d_projection

  with_hue_as_dim:
    <<: *scatter3d_facet
    specifiers: [col, hue]
    min_dims: 2
    max_dims: 2
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      <<: *use_3d_projection

  with_markersize_like_hue:
    <<: *scatter3d_facet
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      hue: dim_0
      markersize: dim_0  # cannot be a data variable here
      <<: *use_3d_projection

  with_markersize_no_facet:
    <<: *scatter3d_no_facet
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      hue: spam
      markersize: fish  # here it can be a data variable!
      <<: *use_3d_projection

  with_markersize_as_data_var:
    <<: *scatter3d_facet
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      hue: spam
      markersize: fish
      <<: *use_3d_projection
    raises:
      3: [PlottingError, s must be a scalar]  # size mismatch

  with_markersize_as_dim:
    <<: *scatter3d_facet
    specifiers: [col, row, markersize]
    min_dims: 3
    max_dims: 3
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      <<: *use_3d_projection

  with_auto_encoding:
    <<: *scatter3d_facet
    specifiers: []
    min_dims: 3
    max_dims: 5
    plot_kwargs:
      auto_encoding: true
      x: foo
      y: bar
      z: baz
      hue: spam
      markersize: dim_2
      <<: *use_3d_projection
    raises:
      5: &bad_dimensionality [PlottingError, "Unexpected data dimensionality"]

  scatter3d_autoenc:
    kinds: [scatter3d]
    specifiers: [col]
    min_dims: 2
    max_dims: 4
    test_data_path: ds_labelled
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      hue: spam
      auto_encoding: true
      <<: *use_3d_projection

  scatter3d_fail:
    kinds: [scatter3d]
    specifiers: [col]
    min_dims: 2
    max_dims: 4
    test_data_path: ds_labelled
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      hue: spam
      auto_encoding: true
    raises:
      2: &z-Exception [PlottingError, "Missing z-axis"]
      3: *z-Exception
      4: *z-Exception


# .. Figure creation ..........................................................
fig_creation:
  figure_not_created:
    kinds: [auto]
    specifiers: []
    max_dims: 4
    plot_kwargs:
      auto_encoding: true

  figure_created:
    kinds: [auto]
    specifiers: []
    max_dims: 4
    plot_kwargs:
      auto_encoding: true

      # The following arguments trigger figure creation for non-faceting plots:
      size: 4
      aspect: 1


# .. ColorManager support .....................................................
cm_support:
  # for dantro-implemented plot functions that support cmap
  scatter3d:
    <<: *scatter3d_facet
    plot_kwargs:
      x: foo
      y: bar
      z: baz
      hue: spam
      <<: [*use_3d_projection, *cm_support_kwargs]

  # also test for (some) xarray facet grid kinds that support cmap
  pcolormesh:
    <<: *contour
    kinds: [pcolormesh]
    plot_kwargs:
      <<: *cm_support_kwargs

  pcolormesh_no_cm:
    <<: *contour
    kinds: [pcolormesh]
    plot_kwargs:
      <<: *cm_support_kwargs
      use_color_manager: false  # can deactivate cm but will raise
    raises:
      3: [PlottingError, has no attribute]
      4: [PlottingError, has no attribute]

  scatter:
    kinds: [scatter]
    specifiers: [col]
    min_dims: 1
    max_dims: 3
    test_data_path: ds_labelled
    plot_kwargs:
      <<: *cm_support_kwargs
      x: foo
      y: bar
      hue: spam
    raises:
      1: [PlottingError, No numeric data to plot]



# -----------------------------------------------------------------------------
# NOTE: All below are extended tests, i.e.: only run if FULL_TEST is set!
# .. line-like plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
line:
  line_ext:
    kinds: [line]
    specifiers: [x, row, col, hue, frames]
    max_dims: 6
    raises:
      0: &Exception [Exception, '']
      6: *line_plots_1d_or_2d

  # basically the same as line, but does not support hue (for some reason)
  step_ext:
    kinds: [step]
    specifiers: [x, row, col, frames]
    max_dims: 5
    raises:
      0: *Exception
      5: *Exception

# .. 2D plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2d:
  # contour plots can plot 2-5 dimensions
  contour_ext: &contour_extended
    kinds: [contourf, contour]
    specifiers: [x, 'y', col, row, frames]
    min_dims: 0
    max_dims: 6
    raises:
      0: *Exception
      1: *Exception
      6: *Exception
    plot_kwargs: {}

  heatmap_ext:
    <<: *contour_extended
    kinds: [pcolormesh]

  # imshow plots can plot 2-6 dimensions, interpreting some values as RGB
  imshow_ext:
    kinds: [imshow]
    specifiers: [x, 'y', row, col, frames]
    max_dims: 7
    raises:
      0: *Exception
      1: *Exception
      7: *Exception

# .. histograms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
hist:
  # hist can only be used with frames, but then it accepts any dimensionality
  hist_ext:
    kinds: [hist]
    specifiers: [frames]
    max_dims: 6

  hist_errors:
    kinds: [hist]
    specifiers: [x, frames]
    max_dims: 3
    raises:
      1: &hist_type_err [PlottingError, 'hist\(\) got multiple values for arg']
      2: *hist_type_err
      3: *hist_type_err
